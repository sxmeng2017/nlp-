在设计程序时，需要好好思考自己的程序的业务的层级。尝试回答下面的问题
1.程序要解决什么问题？

2.程序要在多大的事件粒度上保持稳定？

3.程序应该如何分层，每一层封装什么功能？

4.怎么书写有益于测试？

5.重用性，可维护性如何保证？

所以基于对象的编程中，要仔细思考最小的对象的设计和封装时展现在外的接口的功能。
务必做到接口对外使用方便，调整不大。对内易于修改维护。
这就需要好好的思考的功能分层。
而其中，将对象和功能拆开来分别设计的方式便于添加和改写功能。
在写程序时，可以先写一个对象，但它只具有最基本的携带数据。
而功能由别的类帮忙完成。
最后使用多继承来将所有的功能整合起来。
即一只羊，我们设计一个羊的抽象对象，具有毛色，角长等属性。
然后编写跳跃，喝水等功能的类。
最后羊对象继承羊的抽象类和功能类。如果要改变功能，就只用修改功能类。要删除功能只要删除功能类
